# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake multi-platform builds (Linux native + Windows cross-compilation)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      # 1. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, MinGW cross-compilation for Windows, Ninja generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, mingw-cross]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            generator: "Unix Makefiles"
            platform: "linux"
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"
            platform: "linux"
          - os: ubuntu-latest
            c_compiler: mingw-cross
            cpp_compiler: mingw-cross
            generator: "Ninja"
            platform: "windows"
            toolchain_file: "mingw-w64-toolchain.cmake"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

      # Install MinGW cross-compilation dependencies
    - name: Install Windows dependencies (MinGW cross-compilation)
      if: matrix.c_compiler == 'mingw-cross'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64 g++-mingw-w64 ninja-build
        
    - name: Install Linux build dependencies
      if: matrix.c_compiler != 'mingw-cross'
      run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxext-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl1-mesa-dev libdrm-dev libgbm-dev wayland-protocols libwayland-dev libunwind-dev

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        if [ "${{ matrix.c_compiler }}" = "mingw-cross" ]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/${{ matrix.toolchain_file }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -G "${{ matrix.generator }}" \
            -S ${{ github.workspace }}
        else
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -G "${{ matrix.generator }}" \
            -S ${{ github.workspace }}
        fi

    - name: Build
      # Build your program with the given configuration.
      run: |
        if [ "${{ matrix.generator }}" = "Ninja" ]; then
          ninja -C ${{ steps.strings.outputs.build-output-dir }}
        else
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
        fi

    - name: Upload executable artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chip8-emulator-${{ matrix.platform }}-${{ matrix.c_compiler }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/*.exe
          ${{ steps.strings.outputs.build-output-dir }}/chip_8
          ${{ steps.strings.outputs.build-output-dir }}/chip_8*
          ${{ steps.strings.outputs.build-output-dir }}/thirdparty/SDL/*.dll
        if-no-files-found: warn

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
